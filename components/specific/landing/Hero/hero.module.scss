@use '../../../layout/animations';
@use '../../../layout/colours';

.hero {
    // padding: 2.1em;
    box-sizing: border-box;
    // overflow: hidden;
    user-select: none;
    min-height: 100vh; // Add minimum height for mobile
    padding: 2.1em; // Default padding for mobile and tablet
}

.title {
    font-family: var(--font-syne);
    color: white;
    font-size: 2em; // Reduced from 2.65em for mobile
    font-weight: 700; // Increased from 400 for more impact
    margin: 0 0 .75em 0;
    opacity: 0;
    animation: reveal-title 0.5s ease-out forwards;
    animation-delay: 0.4s;
    user-select: none;
}

.projects {
    display: flex;
    flex-direction: column; // Stack vertically on mobile/tablet
    gap: 1em;
    align-items: flex-start;
    height: 100%;
    box-sizing: border-box;
    position: relative; // Add this to contain absolute arrows
}

.projectdesc {
    font-family: var(--font-inter);
    color: rgb(236, 236, 236);
    font-weight: 400;
    box-sizing: border-box;
    opacity: 0;
    animation: reveal-desc 0.5s ease-out forwards;
    animation-delay: 0.6s;
    padding: 0 1.5em; // Reduce padding for mobile
    margin-bottom: 0; // Remove bottom margin
    user-select: none;
    position: relative; // Ensure text stays above preview
    min-height: 72vh;
    width: 100%;
    display: flex;
    flex-direction: column;
    z-index: 1;
}

.projectname {
    font-family: var(--font-syne);
    font-weight: 600;
    font-size: 1.5em; // Add smaller size for mobile
    color: rgb(236, 236, 236);
    margin-top: 0;
    margin-bottom: 1em; // Add space below project name
    opacity: 0;
    animation: reveal-desc 0.5s ease-out forwards;
    animation-delay: 0.6s;
    user-select: none;
    position: relative; // Add relative positioning
    z-index: 2; // Ensure it's above preview
}

// Base mobile styles
.projectpreview {
    opacity: 0;
    position: absolute; // Change to absolute
    top: 9em; // Reduce from 10em to raise the preview content slightly more
    left: 0;
    width: 100%;
    height: auto; // Let height be determined by content
    max-height: none; // Remove max-height to fit naturally
    margin-top: 1em; // Return to original spacing
    visibility: hidden;
    transition: opacity 0.5s ease-out, visibility 0.5s ease-out;
    display: flex;
    flex-direction: column;
    justify-content: center; // Center vertically
    align-items: center; // Center horizontally
    z-index: 1;
    padding: 0 1.5em; // Match projectdesc padding for mobile
    box-sizing: border-box;
    min-height: auto;
    transition: all 0.4s ease-in-out;

    &.showMobile {
        visibility: visible;
        opacity: 1;

        .screen {
            opacity: 1;
            width: 100%;
            height: auto;
            max-height: 35vh; // Slightly reduce height
            margin-bottom: 1.5em; // More space between screen and mobile
            transform: translateX(0);
            transition: all 0.4s ease-in-out;
            transition-delay: 0.2s;
        }

        .mobile {
            position: absolute;
            top: 20%;
            left: 50%;
            width: 25%; // Make mobile preview smaller
            opacity: 1;
            transform: translate(-50%, 0); // Initially center
            transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1); // Smoother easing
            transition-delay: 0.4s;

            // Move to right side after initial reveal
            &.showMobile {
                left: 75%; // Move to right on mobile by default
            }
        }
    }

    &:not(.showMobile) {
        visibility: hidden;
        opacity: 0;
        pointer-events: none;

        * {
            visibility: hidden;
            opacity: 0;
        }
    }
}

.screen { 
    opacity: 0;
    position: relative;
    z-index: 1; // Lower z-index
    transition: all 0.5s ease-out;
    transform: translateX(-20px);
    user-select: none;
    display: block; // Always display but control with opacity
    width: 100%; // Set explicit width
    aspect-ratio: 16 / 9; // Lock aspect ratio
    max-height: 35vh; // Match the showMobile state
    
    &:not(.showMobile) {
        opacity: 0;
        transform: translateX(-20px);
    }
    
    &.showMobile {
        opacity: 1;
    }
}

.mobile {
    opacity: 0;
    position: absolute;
    z-index: 3; // Higher z-index to ensure it's above screen
}

.screenspinner {
    width: 4em;
    height: 4em;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 2;
    opacity: 1;
    transition: opacity 0.2s ease-out;
}

.mobilespinner {
    width: 3em;
    height: 3em;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 2;
    opacity: 1;
    transition: opacity 0.2s ease-out;
}

.projectproblems,
.projectsolutions,
.projectparagraph {
    font-family: var(--font-inter);
    font-weight: 400;
    color: rgb(166, 166, 166);
    line-height: 1.6;
    opacity: 0;
    transition: opacity 0.3s ease-out; // Adjust transition
    user-select: none;
}

.projectproblems,
.projectsolutions {
    font-family: var(--font-syne);
    font-weight: 500;
    color: rgb(217, 217, 217);
}

.projectparagraph {
    font-family: var(--font-inter);
    font-weight: 400;
    color: rgb(166, 166, 166);
    line-height: 1.6;
}

// Base controls and dots styles (mobile first)
.controls {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1em;
    opacity: 0;
    transition: opacity 0.3s ease-out;
    margin-top: 1.5em;
    
    &.visible {
        opacity: 1;
    }
}

.dots {
    width: 100%;
    display: flex;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.2s ease-out;
    margin-top: 0.75em;
    pointer-events: none;
    overflow: hidden;
    
    @media screen and (max-width: 1199px) {
        // Mobile-specific adjustments
        position: relative;
        bottom: 0;
        margin-top: 2em;
        transition: opacity 0.25s ease-out;
        
        &.visible {
            transition-delay: 0.2s;
        }
    }

    &.visible {
        opacity: 1;
        pointer-events: auto;

        .dot {
            opacity: 0;
            transform: scale(0);
            // Speed up the appear animation
            animation: dotAppear 0.35s cubic-bezier(0.4, 0, 0.2, 1) forwards;

            @media screen and (max-width: 1199px) {
                // Faster animations for mobile
                animation-duration: 0.25s;
            }

            // First dot appears after a short delay
            &:first-child {
                animation-delay: 0.1s;
            }

            // Other dots follow quickly
            @for $i from 2 through 6 {
                &:nth-child(#{$i}) {
                    animation-delay: #{0.1 + (0.05 * ($i - 1))}s;
                }
            }
        }
    }

    &:not(.visible) {
        opacity: 0;
        pointer-events: none;
        visibility: hidden; // Add this to prevent flash
        transition: opacity 0.15s ease-out,
                    visibility 0.15s ease-out;

        .dot {
            transition: none;
            opacity: 0;
            transform: scale(0);
        }
    }
}

.dot {
    cursor: pointer;
    margin-right: 0.35em;
    width: 2em; // Increased from 1.3em for mobile
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); // Smoother transition
    transform-origin: center;
    transform: scale(0.8); // Start slightly smaller
    opacity: 0.7;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0; // Start invisible
    transform: scale(0); // Start scaled down
    transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1),
                opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);

    @media screen and (max-width: 1199px) {
        width: 1.5em; // Slightly smaller on mobile
    }
    
    &:not(:last-child) {
        margin-right: 0.35em;
    }

    &.active, &:hover circle {
        fill: rgb(217, 217, 217);
        transform: scale(1.1); // Slightly larger when active
        opacity: 1;
        transition-delay: 0s; // Remove delay for active state
    }

    &:hover {
        transform: scale(1.1);
        opacity: 1;
    }

    // Remove entering/exiting classes as they're no longer needed
    &.entering,
    &.exiting {
        display: none;
    }
}

.link {
    font-family: var(--font-inter);
    font-size: 1.225em;
    font-weight: 500; // Increased from 300 for better readability
    color: rgb(166, 166, 166);
    text-decoration: none;
    font-weight: 300;
    padding: 0.135em;
    border-radius: 0.135em;
    transition: all 0.25s ease-out; // Smoother transition

    &:hover {
        color: rgb(44, 44, 44);
        background: rgb(217, 217, 217);
    }
}

.controllinks {
    display: flex;
    gap: 1em;
}

// Base arrow styles - just keep display none for mobile
.arrows {
    display: none;
}

.buttonspacer {
    width: 3.5em;
    height: 3.5em;
    opacity: 0;
    transition: opacity 0.3s ease-out; // Add transition to spacer
}

.button {
    pointer-events: auto;
    background: rgba(255, 255, 255, 0.5);
    border: none;
    border-radius: 50%;
    width: 3.5em;
    height: 3.5em;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    opacity: 0.7;
    transition: all 0.3s ease-out; // Smoother transition
    position: relative;
    user-select: none;
    visibility: visible; // Add this to ensure visibility transitions work

    &:hover {
        opacity: 1;
    }

    &:disabled {
        opacity: 0;
        cursor: not-allowed;
        pointer-events: none;
        // Remove visibility: hidden to allow fade out
    }
}

.buttonleft,
.buttonright {
    position: static;
}

.buttonleft {
    left: 0;
}

.buttonright {
    right: 0;
}

.arrow {
    width: 2.5em;
    height: 2.5em;
    
    path {
        fill: white;
        stroke-width: 1.5;
    }
}

.arrowleft {
    margin-left: 0;
}

.arrowright {
    margin-right: 0;
}

// Mobile-specific animations
.contentContainer {
    opacity: 0;
    min-height: 0;
    margin-bottom: 0;
    pointer-events: none; // Prevent interaction during transitions
    position: relative; // Add this to contain meta

    .projectproblems,
    .projectsolutions,
    .projectparagraph {
        opacity: 0;
        transform: translateY(10px);
        will-change: opacity, transform;

        // Remove transition here - we'll add it only when visible
        transition: none;
    }

    @media screen and (max-width: 1199px) {
        transition: opacity 0.25s ease-out;
    }

    &.visible {
        opacity: 1;
        pointer-events: auto; // Re-enable interaction

        .projectproblems,
        .projectsolutions,
        .projectparagraph {
            // Add transitions only when visible
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .projectproblems {
            opacity: 1;
            transform: translateY(0);
            transition-delay: 0.1s;
        }

        .projectparagraph:first-of-type {
            opacity: 1;
            transform: translateY(0);
            transition-delay: 0.25s;
        }

        .projectsolutions {
            opacity: 1;
            transform: translateY(0);
            transition-delay: 0.4s;
        }

        .projectparagraph:last-of-type {
            opacity: 1;
            transform: translateY(0);
            transition-delay: 0.55s;
        }

        // Add controls to animation sequence
        .controls {
            opacity: 1;
            transform: translateY(0);
            transition-delay: 0.7s;
        }

        .meta {
            opacity: 1;
            visibility: visible;
            pointer-events: auto;
            transition-delay: 0.7s; // Match the content animation sequence
        }

        @media screen and (max-width: 1199px) {
            .meta {
                transition-delay: 0.3s;
            }
        }
    }
}

// Base controls styles
.controls {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1em;
    opacity: 0;
    transform: translateY(10px);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    margin-top: 2em;
}

// Base dots styles
.dots {
    width: 100%;
    display: flex;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease-out;
    margin-top: 1.5em;
    pointer-events: none;
    
    &.visible {
        opacity: 1;
        pointer-events: auto;
    }
}

// Update meta positioning for mobile
.meta {
    position: absolute;
    left: 0;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    opacity: 0;
    visibility: hidden; // Add this to prevent interaction during animation
    transition: opacity 0.3s ease-out, visibility 0.3s ease-out;
    margin-top: 2em; // Add some space after solutions
    pointer-events: none;
    margin: 0;
    padding: 0;
    top: calc(100% + 2em); // Add more space after content
    box-sizing: border-box;

    &.visible {
        opacity: 1;
        visibility: visible;
        pointer-events: auto;
    }

    .controls,
    .dots {
        margin: 0;
        opacity: 1;
        transition: none;
        pointer-events: inherit;
        width: auto; // Allow natural width
    }

    .controls {
        flex-direction: row;
        align-items: center;
    }

    .dots {
        display: flex;
        align-items: center;
    }
}

@media screen and (min-width: 1200px) {
    .hero {
        padding: 3em 8em; // Increase horizontal padding to accommodate arrows
        min-height: 80vh;
    }

    .projects {
        flex-direction: row;
        align-items: center;
        gap: 4em;
        padding: 0;
    }

    .projectdesc {
        padding: 0; // Reset padding for desktop
        min-height: 60vh;
        margin-bottom: 0;
        flex: 0 0 35%;
        display: flex;
        flex-direction: column;
        color: white;
        align-self: flex-start;
        position: relative;
    }

    // Desktop styles override at the end
    .projectpreview {
        position: relative;
        opacity: 0; // Start hidden
        visibility: hidden; // Start hidden
        height: 60vh;
        padding: 0; // Reset padding for desktop
        top: auto; // Reset top position for desktop
        width: 65%; // Ensure width is set for desktop
        margin: 0; // Reset margin
        transition: opacity 0.4s ease-in-out, visibility 0.4s ease-in-out;
        overflow: visible; // Allow buttons to overflow

        .screen {
            position: relative;
            display: block;
            width: 100%;
            height: 100%;
            opacity: 0; // Start hidden
            margin: 0;
            max-height: none;
            animation: none; // Remove default animation
            transition: all 0.4s ease-in-out;
            transform: translateX(20px);
            transition-delay: 0.1s;
            z-index: 1; // Ensure consistent z-index in desktop view
        }

        .mobile {
            position: absolute;
            bottom: -1em;
            right: 15%;
            top: auto;
            left: auto;
            width: 14vw;
            transform: translateY(20px);
            opacity: 0; // Start hidden
            animation: none; // Remove default animation
            transition: all 0.4s ease-in-out;
            transition-delay: 0.3s;
            z-index: 3; // Keep mobile above screen in desktop view
        }

        &.showMobile {
            visibility: visible;
            opacity: 1;

            .screen,
            .mobile {
                // Remove any mobile-specific size/position adjustments
                width: auto;
                margin: 0;
            }

            .screen {
                width: 100%;
                height: 100%;
                max-height: none;
                margin: 0;
                opacity: 1;
                transform: translateX(0);
                transition: all 0.4s ease-in-out;
                transition-delay: 0.1s;
            }

            .mobile {
                // Keep original desktop position and size
                position: absolute;
                bottom: -1em;
                right: 15%;
                top: auto;
                left: auto;
                width: 14vw;
                transform: translateY(0);
                opacity: 1;
                transition: all 0.4s ease-in-out;
                transition-delay: 0.3s;
            }

            .mobile.showMobile {
                left: auto; // Reset mobile position
                right: 15%; // Use desktop position instead
            }
        }

        // Remove any transition properties that might affect size/position
        .screen,
        .mobile {
            transition: opacity 0.3s ease-out;
            visibility: visible;
            transform: none;
        }
    }

    // Show arrows on desktop - update these styles
    .arrows {
        display: flex;
        position: absolute;
        top: 50%; // Center vertically
        left: 50%;
        transform: translate(-50%, -50%);
        width: calc(100% + 12em);
        justify-content: space-between;
        z-index: 20;
        opacity: 0;
        visibility: hidden;
        pointer-events: none;
        transition: opacity 0.3s ease-out, visibility 0.3s ease-out;
        height: 0; // Prevent height influence
        margin: 0; // Remove any margin
        padding: 0; // Remove any padding

        &.visible {
            opacity: 1;
            visibility: visible;
            pointer-events: auto;
        }
    }

    .button {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        margin: 0;
        z-index: 20;

        &.buttonleft {
            left: 0;
        }

        &.buttonright {
            right: 0;
        }
    }

    .title {
        font-family: var(--font-syne);
        font-size: 2.65em; // Restore original desktop size
        // ...existing desktop title properties...
    }

    .projectname {
        font-family: var(--font-syne);
        font-size: 2em; // Restore larger size for desktop
        // ...existing desktop projectname properties...
    }

    .controls,
    .dots {
        &.visible {
            transition: opacity 0.3s ease-out; // Restore transition for desktop
        }
    }

    .controls {
        position: absolute; // Only absolute in desktop
        bottom: -4.45em;
        left: 0;
        margin-top: 2em;
        flex-direction: row;
        justify-content: space-between;
        z-index: 2;
    }

    .dots {
        position: absolute; // Only absolute in desktop
        bottom: -4.25em;
        left: 0;
        margin-top: 0;
    }

    .controls {
        position: absolute;
        bottom: -4.45em;
        left: 0;
        top: auto;
        transform: none;
        margin-top: 2em;
        width: 100%;
        z-index: 2;
        box-sizing: border-box;
        text-align: left;
        flex-direction: row;
        justify-content: space-between;
        // padding: 0 2em;
    }

    // Reset meta positioning for desktop
    .meta {
        position: absolute;
        bottom: -4.45em;
        left: 0;
        top: auto;
        padding: 0;
        margin: 0;
        width: 100%;
        flex-direction: row;
        align-items: center;
        justify-content: flex-start; // Align to left
        gap: 2em; // Space between controls and dots
        opacity: 0; // Start hidden
        visibility: hidden; // Start hidden
        transition: opacity 0.3s ease-out, visibility 0.3s ease-out; // Add transition

        &.visible {
            opacity: 1;
            visibility: visible;
        }

        // Remove individual positioning
        .controls,
        .dots {
            position: static;
            margin: 0;
            bottom: auto;
            left: auto;
        }
    }
    
    // Remove redundant desktop position styles for controls and dots
    .controls, .dots {
        position: static;
    }

    // Remove duplicate meta styles
    .meta {
        &:not(:first-of-type) {
            display: none;
        }
    }

    .controls {
        width: 100%;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        z-index: 2;
    }

    .dots {
        width: 100%;
        justify-content: flex-start;
    }

    .dot {
        width: 1.3em; // Return to original size for desktop
    }

    .screen {
        display: block;
    }

    .screeniframe {
        height: 100%;
    }

    .contentContainer.visible {
        .projectproblems {
            transition-delay: 0.2s;
        }

        .projectparagraph:first-of-type {
            transition-delay: 0.35s;
        }

        .projectsolutions {
            transition-delay: 0.5s;
        }

        .projectparagraph:last-of-type {
            transition-delay: 0.65s;
        }
    }

    // Ensure transitions are smoother
    .screen,
    .mobile {
        transition: opacity 0.3s ease-out;
        visibility: visible;
    }

    // Optional: Add visual feedback for disabled controls
    .button,
    .dot {
        &[disabled],
        &.disabled {
            opacity: 0.3;
            cursor: not-allowed;
            pointer-events: none;
        }
    }
}

// Ensure keyframes are correctly defined
@keyframes reveal-desc {
    from {
        transform: translateX(-20px);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

// Add new keyframe animation
@keyframes dotAppear {
    0% {
        transform: scale(0);
        opacity: 0;
    }
    60% {
        transform: scale(1.1);
        opacity: 0.5;
    }
    100% {
        transform: scale(0.8);
        opacity: 0.7;
    }
}

// Generate dynamic keyframes for each dot position
@for $i from 2 through 6 {
    @keyframes dotAppearCurved-#{$i} {
        0% {
            transform: scale(0) translateX(-#{$i * 5}px);
            opacity: 0;
        }
        60% {
            transform: scale(1.1) translateX(0);
            opacity: 0.5;
        }
        100% {
            transform: scale(0.8);
            opacity: 0.7;
        }
    }
}